<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>VMware软件安装及问题解决</title>
    <url>/2022/10/08/VMware%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h2 id="vmware软件安装">VMware软件安装</h2>
<blockquote>
<p>前言：最近学习Redis时需要使用Linux系统，导致不得不去安装一个虚拟机了，在准备安装VMware软件时遇到了一些问题，这里给出记录和解决方案，以做参考学习使用</p>
</blockquote>
<h3 id="准备工作">准备工作</h3>
<blockquote>
<p>本文将在Windows系统下使用VMware软件配置Linux虚拟机，下文将会详解VMware软件的安装步骤</p>
</blockquote>
<p>VMware软件下载地址：<a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html">https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html</a><br>
Linux CentOS 7版本下载映像文件地址：<a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/">http://mirrors.aliyun.com/centos/7/isos/x86_64/</a><br></p>
<p>按图片所示下载即可</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202209262109879.png"></p>
<p>这里我选择的是CentOS-7.0-x86_64-DVD-2009.iso 版本</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202209262106973.png"></p>
<p>在下载路径下右键以管理员身份运行</p>
<p><strong>在这里要敲重点！！！如果你没有以管理员身份运行这个选项，那么就看接下来的问题解决部分，如果你有这个选项请点击<a href="#1">跳转</a>自行无视。</strong></p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202209262117313.png"></p>
<h3 id="问题解决">问题解决</h3>
<blockquote>
<p>按住快捷键Win+R打开运行窗口，输入“regedit”，</p>
<p>这样就打开了注册表编辑器</p>
<p>在编辑器左侧依次找到HKEY_CURRENT_USER</p>
<p>然后将RestrictToPermittedSnapins的值设置为0</p>
</blockquote>
<p>上面的方法如果输入路径后发现MMC不存在，那么下面这个方法就派上用场了！</p>
<p>按下Win +
R键打开运行，输入gpedit.msc打开组策略编辑器，这里可能你又会惊讶的发现，gpedit.msc打不开了！别着急，下面还有解决方案。当然，如果你能打开组策略编辑器的话可以点击<a href="#2">这里</a>继续往下看</p>
<p>对于无法打开组策略编辑器的情况，win + r
键打开运行后，输入notepad打开记事本，复制粘贴以下内容</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"></span><br><span class="line"><span class="built_in">pushd</span> <span class="string">&quot;%~dp0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">dir</span> /b C:\Windows\servicing\Packages\Microsoft-Windows-GroupPolicy-ClientExtensions-Package~3*.mum &gt;List.txt</span><br><span class="line"></span><br><span class="line"><span class="built_in">dir</span> /b C:\Windows\servicing\Packages\Microsoft-Windows-GroupPolicy-ClientTools-Package~3*.mum &gt;&gt;List.txt</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> /f %%i <span class="keyword">in</span> (<span class="string">&#x27;findstr /i . List.txt 2^&gt;nul&#x27;</span>) <span class="keyword">do</span> dism /online /norestart /add-package:<span class="string">&quot;C:\Windows\servicing\Packages\%%i&quot;</span></span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure>
<p>记事本左上角文件另存为到任意路径下</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202209262129654.png"></p>
<p>文件名写为gpedit.cmd，保存类型选择所有文件，编码选择ANSI</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202209262131529.png"></p>
<p>点击保存后在你保存的路径下右键以管理员身份运行</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202209262132085.png"></p>
<p>等待运行结束后发现win + R键打开的gpedit.msc可以正常打开了<br></p>
<p><span id="2"></span></p>
<p>接下来进入组策略编辑器，双击计算机配置 --&gt; Windows设置 --&gt;
安全设置<br></p>
<p>双击本地策略</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202209262139507.png"></p>
<p>进入安全选项找到下面两项选择已启用</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202209262141895.png"></p>
<p><strong>大功告成！！！</strong></p>
<p><span id="1"></span></p>
<h3 id="安装vmware">安装VMware</h3>
<p>当解决上述问题后开始准备下载VM软件了，右键以管理员身份运行后等待片刻来到安装界面</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202209262147272.png"></p>
<p>一路下一步来到这个界面，安装路径自己选择，我选择安装在D盘下的目录里</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202209262148344.png"></p>
<p>勾选取消“启动时检查产品更新”</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202209262149952.png"></p>
<p>一路下一步，点击安装</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202209262151352.png"></p>
<p>点击许可证</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202209262153587.png"></p>
<p>这里要输入许可证密钥（这里大家自行网络上获取），然后点击输入，安装结束，注意不要误点到跳过了。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202209262155195.png"></p>
<p>输入密钥确认安装后就可以使用VMware了！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>问题解决</tag>
      </tags>
  </entry>
  <entry>
    <title>VMWare演示Redis持久化</title>
    <url>/2022/10/28/VMWare%E6%BC%94%E7%A4%BARedis%E6%8C%81%E4%B9%85%E5%8C%96/</url>
    <content><![CDATA[<h2 id="vmware演示redis持久化">VMware演示Redis持久化</h2>
<h3 id="redis持久化的作用">Redis持久化的作用</h3>
<p>Redis是内存存储，如果出现服务器宕机、服务重启等情况可能会丢失数据，利用Redis持久化可以将数据写入磁盘中，这样Redis就可以利用持久化的文件进行数据恢复，数据安全性得以大大提升。<br></p>
<h3 id="rdb">RDB</h3>
<blockquote>
<p>RDB全称为Redis Database Backup
file(Redis数据备份文件)，也被叫做Redis数据快照。简单来说就是把内存重的所有数据都记录道磁盘中。当Redis实例故障重启后，从磁盘读取快照文件，恢复数据。</p>
</blockquote>
<p>RDB实现数据持久化有两种命令：<code>save</code>和<code>bgsave</code></p>
<p>save命令适合用于准备将Redis停机的情况。</p>
<p>在执行save命令时会占用Redis的主进程，阻塞所有命令，因此不适用于Redis正在运行的情况。</p>
<p>而bgsave命令会执行fork操作开启一个子进程，避免主进程收到影响。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202210282119328.png"></p>
<p>此外，当Redis停机时会执行一次RDB操作进行数据备份。</p>
<p>下面将对该情况进行验证</p>
<h3 id="rdb演示">RDB演示</h3>
<p>使用<code>redis-server redis.conf</code>指令在任意路径下运行Redis</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202210291303145.png"></p>
<p>接下来创建一个新的终端创建连接，存入键值对</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202210301657349.png"></p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202210301708367.png"></p>
<p>接着回到上一个终端使用<code>ctrl + c</code>关闭Redis，可以看到<code>DB saved on disk</code>表示文件正常保存</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202210282139525.png"></p>
<p>在当前路径下使用ll查看所有文件，看到dump.rdb快照文件已经生成<img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202210282141216.png"></p>
<p>接着再次在当前终端使用<code>redis-server redis.conf</code>启动Redis，此时数据会自动恢复，回到另一个终端窗口</p>
<p>此时将使用<code>ctrl + c</code>关闭当前命令行客户端，重新使用<code>redis-cli</code>开启一个新的命令行</p>
<p>这时使用get num命令发现数据返回为789，（如果get
num返回错误<strong>Error：Server closed the
connection</strong>要将redis.conf的<strong>protected-mode</strong>设置为No关闭保护模式）表明数据备份成功</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202210301704159.png"></p>
<p><strong>Redis停机自动执行RDB证明完毕！</strong></p>
<h3 id="实现rdb的相关配置">实现RDB的相关配置</h3>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202210282152250.png"></p>
<p>这里需要 cd 到redis的安装目录下，我的安装目录在
/usr/local/src/redis-6.2.6下</p>
<p>这里老师用的MobaXterm可以直接使用第三方文件打开配置文件进行修改，因为我用的是VMware所以只能使用Linux命令进行修改配置</p>
<p>使用 <code>vi redis.conf</code>修改配置文件</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202210282159322.png"></p>
<p>这里有一些小技巧：</p>
<ul>
<li>按下INSERT键进入修改状态，此时才可以对文件进行修改</li>
<li>按下ESC键可以使用一些命令：<code>/xxx</code>可以查找跳跃到当前文件中的xxx名称，<code>:wq</code>保存当前文件并退出，<code>:q</code>不保存并退出当前文件，<code>:q!</code>不保存并强制退出当前文件</li>
</ul>
<p>下面就可以对配置文件进行修改了！</p>
<p>修改为五秒内执行一次操作就出发RDB备份</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202210282209053.png"></p>
<p>接着</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202210282211172.png"></p>
<p>再查找rdbcompression后修改为yes即可</p>
<p>使用:wq保存并退出</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202210282214630.png"></p>
<p>rdb文件名修改后使用终端再次运行Redis，发现此时没有DB文件录入消息，之前的dump.rdb文件已不能被读取</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202210291316731.png"></p>
<p>到另一个终端重新使用redis-cli开启命令行，使用get
num命令发现结果为空，再set
一个新的键值，回到Redis窗口发现出现<code>Background saving started</code>字段即表示成功！</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202210282221596.png"></p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202210291318662.png"></p>
<h3 id="aof">AOF</h3>
<blockquote>
<p>AOF全称为Append Only File
(追加文件)。Redis处理的每一个写命令都会记录在AOF文件，可以看做是命令日志文件。</p>
</blockquote>
<p>开启AOF需要在Redis的配置文件中修改配置，AOF记录命令的频率有三种:<code>always</code>
、<code>everysec</code>和<code>no</code></p>
<p>always配置胜在能记录每一次Redis执行的写命令，几乎不会丢失数据，但对性能会有很大的影响</p>
<p>everysec配置每隔一秒将缓冲区里的数据写入到AOF文件，避免直接对AOF文件操作而性能上有了提升，但是在数据间隔的一秒内如果出现服务宕机的情况会丢失最多一秒的数据</p>
<p>no配置执行频率最低，性能最好，但是可靠性很低，不推荐使用</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202210301559763.png"></p>
<h3 id="aof演示">AOF演示</h3>
<p>先使用 cd 命令进入到Redis的安装路径下</p>
<p>使用<code>vi redis.conf</code>命令修改redis配置文件</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202210301615021.png"></p>
<p>将之前的save 5 1注释掉，写入save ""，表示禁用RDB</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202210301617321.png"></p>
<p>将appendonly修改为yes，开启AOF</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202210301618239.png"></p>
<p>AOF执行频率的命令配置默认为<code>appendfsync everysec</code>，不需要修改</p>
<p>修改完毕后回到终端，使用<code>rm -rf *.rdb</code>删除之前的RDB文件</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202210301622298.png"></p>
<p>可以看到当前目录下rdb文件已删除</p>
<p>使用<code>redis-server redis.conf</code>命令重启Redis</p>
<p>发现日志中出现没有对RDB的读取，修改成功</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202210301626879.png"></p>
<p>在另一终端打开命令行，输入如下指令</p>
<p>返回空集合，说明所有数据已被清除</p>
<figure>
<img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202210301703747.png" alt="img">
<figcaption aria-hidden="true">img</figcaption>
</figure>
<p>set一个键值对</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202210301630032.png"></p>
<p>这时我们打开文件夹进入本机的Redis的安装路径下，发现AOF文件已经被创建成功，打开AOF文件，set命令已经被写入成功，说明<strong>AOF已经生效了</strong></p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202210301633106.png"></p>
<p>接下来验证AOF的重启恢复，先重启Redis服务，红框内的日志表示数据已经从AOF文件加载完毕</p>
<p><img src="/2022/10/28/VMWare%E6%BC%94%E7%A4%BARedis%E6%8C%81%E4%B9%85%E5%8C%96/Users\86130\AppData\Roaming\Tencent\Users\2484792357\QQ\WinTemp\RichOle\LBDM52Q%5BBMBTK%7DPKDK~HB2V.png"></p>
<p>这时候我们回到命令行使用<code>keys *</code>命令，返回num，依然有数据，说明AOF重启能保证数据的恢复，证明完毕</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202210301640485.png"></p>
<h3 id="rdb和aof的比较">RDB和AOF的比较</h3>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202210301647804.png"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis持久化问题排查</title>
    <url>/2022/10/29/Redis%E6%8C%81%E4%B9%85%E5%8C%96%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/</url>
    <content><![CDATA[<h2 id="redis持久化问题排查">Redis持久化问题排查</h2>
<blockquote>
<p>前言：在学习黑马的Redis持久化课程时因为老师用的MobaXterm软件与我使用的VMware存在差异，同时，老师上传的视频的redis配置与我大为不同而导致了一系列的问题，在进行了一天的排查（死杠）后终于解决了问题，感慨良多。在遇到问题解决不了的时候还是要多回头看，没准在出发点就能找到问题了。
下面就将展示问题的描述和解决方案</p>
</blockquote>
<h3 id="问题描述">问题描述</h3>
<blockquote>
<p>老师在使用MobaXterm软件时使用<code>redis-server redis.conf</code>命令指定配置文件在<strong>前台</strong>启动Redis</p>
<p>然而我在使用redis-server命令却出现了下面的两种情况：</p>
</blockquote>
<p>第一种：不指定配置文件启动Redis</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202210291124212.png"></p>
<p>发现监听6379端口失败</p>
<p>第二种：指定配置文件启动Redis</p>
<p>这里要先cd到自己的Redis安装路径下，然后使用命令<code>redis-server redis.conf</code></p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202210291126030.png"></p>
<p>发现没有产生日志，这里使用<code>ps -ef | grep redis</code>查看后端端口占用情况</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202210291127803.png"></p>
<p>显然，后台端口已经被占用了，这里是因为Redis配置了开机自启动和后台启动，导致端口占用而无法使用redis-server命令</p>
<h3 id="问题解决">问题解决</h3>
<p>在执行以下操作前建议使用VMware创建一个快照，防止后续操作不当导致虚拟机设置出现问题<br></p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202210282129924.png"></p>
<p>先使用以下命令关闭后台端口</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 关闭Redis后台启动，xxx是自己设置的密码</span></span><br><span class="line">redis-cli -p 6379 -a xxxx shutdown</span><br></pre></td></tr></table></figure>
<p>此时cd到Redis的安装目录下，使用命令<code>ps -ef | grep redis</code>查看后台端口占用情况，发现后台端口关闭</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202210291139316.png"></p>
<p>然后在当前路径下使用<code>vi redis.conf</code>关闭Redis后台启动</p>
<p>将 daemonize 修改为 no</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202210291141606.png"></p>
<p>这样Redis就不会在后台启动了！</p>
<p>接着可以开心的使用<code>redis-server redis.conf</code>指定配置文件启动redis了！</p>
<p>然而，如果你使用该命令后又出现了如下情况</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202210291145134.png"></p>
<p>发现当前窗口确实是像前台启动一样阻塞的，但是却没有任何日志信息输出，这时我们打开RESP等图形化界面看一下连接是否成功</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202210291146893.png"></p>
<p>嗯，确实成功了，说明Redis服务确实启动了，但还是没有日志文件，那么这是怎么回事呢？</p>
<p>哈哈，不用着急，我们先使用<code>ctrl + c</code>停止当前端口，然后再回到RESP上发现连接终止，这就说明我们之前做的操作没有问题！现在我们回到终端，使用<code>vi redis.conf</code>命令进入到配置文件中</p>
<p>找到<strong>logfile</strong>，发现logfile后面的引号内为一个日志文件</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202210291150818.png"></p>
<p>这个时候一切都真相大白了，因为在一开始配置Redis时，我们将在logfile的引号内<strong>写入了一个日志文件名称</strong>（一开始的logfile内的引号默认是空的），这就导致了我们使用redis-server命令输出的日志都进入到这个日志文件中，所以启动时当然看不到任何信息了！现在我们将引号内的文件命删除，保存并退出</p>
<p>再次使用<code>redis-server redis.conf</code>命令启动Redis</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202210291153693.png"></p>
<p>启动成功，大功告成！</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>问题解决</tag>
      </tags>
  </entry>
  <entry>
    <title>【IDEA结合Git实现项目管理实战】一、配置篇</title>
    <url>/2023/12/07/%E4%B8%80%E3%80%81IDEA%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<blockquote>
<p>本系列将结合我个人参与团队协作开发项目的经验来介绍如何使用IDEA结合Git实现项目管理，因此可能与真正的企业开发协作存在差异，且文章所涉及的解析可能存在个人理解与实际的偏差。</p>
<p>本系列主讲如何具体操作，因此对于Git内部的原理将<strong>不会过多深究</strong>。</p>
<p>本文严禁任何形式的转载、搬运！</p>
</blockquote>
<p>本文作为该系列的<strong>配置篇</strong>，将介绍如何<strong>使用IDEA整合git</strong>，从而实现项目管理。</p>
<p>本文将使用<strong>Gitee</strong>作为项目管理工具。</p>
<p>注意：本文假定你已经拥有了一个Gitee账号并已经配置了密钥。</p>
<h2 id="下载插件">下载插件</h2>
<p>打开设置</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312101052093.png"></p>
<p>在插件中搜索<strong>Gitee</strong>并下载安装，安装完毕后IDEA会提醒重启IDE，重启后插件才会生效！</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312101052329.png"></p>
<h2 id="添加账号">添加账号</h2>
<p>IDEA重启后，再次打开设置，在版本控制中可以看到Gitee这一栏，点击加号添加账号</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312101055207.png"></p>
<p>点击加号后我们选择<strong>Log in via Gitee</strong></p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312101056039.png"></p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312101057087.png"></p>
<p>授权完毕后点击应用。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312101058578.png"></p>
<h2 id="项目管理">项目管理</h2>
<p>最后一个步骤就是正式的实现项目的版本控制了，实现这一步骤有两种操作。</p>
<p>第一种是<strong>将IDEA本地的项目上传到gitee中</strong></p>
<p>第二种是<strong>从远程clone一个仓库到IDEA本地中</strong></p>
<p>下面我们来逐个介绍这两种操作，并简述这两者之间的区别和使用场景。</p>
<h3 id="将idea本地的下面上传到gitee中">1.将IDEA本地的下面上传到Gitee中</h3>
<p>现在我们打开你想要托管给Gitee的项目，打开工具栏的VCS，点击<strong>Share
Project on Gitee</strong></p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312101106369.png"></p>
<p>这里我们可以设置仓库名（Repository
name），Remote是远程分支名，可以不用修改，Description是这个仓库的描述，这里自己填写即可。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312101108667.png"></p>
<p>填写完毕后点击share，弹出这个窗口。</p>
<p>我们需要在本窗口中添加需要进行版本管理的文件以进行初始化，可以看到，本项目的所有文件都是<strong>理论篇</strong>提到的红色文件名的文件，这是因为这个项目还没有上传到远程仓库，也就不存在被Git跟踪的文件，所以都是红色文件名。</p>
<p>这里我们填写下提交信息并点击添加按钮，就可以上传成功了。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312101111093.png"></p>
<p>上传完毕后，我们可以观察到IDEA中出现了这三个功能块，至于这些功能块有何具体作用，我们将在基础篇详细介绍，这里不过多解释了。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312101114291.png"></p>
<p>这时候我们可以打开gitee的网站，点击顶部工具栏的头像，选择我的仓库，就可以看到刚刚创建的仓库了!</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312101117539.png"></p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312101118688.png"></p>
<h3 id="从远程clone一个仓库到idea本地中">2.从远程clone一个仓库到IDEA本地中</h3>
<p>这一步我们将从远程仓库中clone一个项目到本地中。</p>
<p>我们在gitee中选择一个想要clone的远程仓库，这里我使用的是我自己的远程仓库：</p>
<p><a href="https://gitee.com/moduokesi_admin/work-space">https://gitee.com/moduokesi_admin/work-space</a></p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312101122842.png"></p>
<p>点击VCS，选择从版本控制中获取。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312101127137.png"></p>
<p>在仓库URL中，在URL中粘贴我们刚才复制的HTTPS地址，在目录中选择我们想要放置远程仓库代码的本地地址，填写完毕后点击克隆。</p>
<p>注意：目录必须是一个空目录</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312101128513.png"></p>
<p>等待克隆完成后项目会自动跳转到你选择的目录。</p>
<h2 id="总结">总结</h2>
<p>通过以上的介绍，我们了解到实现版本控制有两种操作：</p>
<p>第一种操作适用于以下场景：</p>
<ul>
<li>本地你已经开发好了项目，需要将项目托管给远程仓库。</li>
</ul>
<p>第二种操作适用于以下场景：</p>
<ul>
<li>团队已经有了远程仓库（有人已经将远程仓库创建好了），这时候我们直接clone即可。</li>
<li>在gitee或github中看到了优质项目，我们clone本地进行学习</li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title>【IDEA结合Git实现项目管理实战】三、实战篇</title>
    <url>/2023/12/15/%E4%B8%89%E3%80%81%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<blockquote>
<p>本系列将结合我个人参与团队协作开发项目的经验来介绍如何使用IDEA结合Git实现项目管理，因此可能与真正的企业开发协作存在差异，且文章所涉及的解析可能存在个人理解与实际的偏差。</p>
<p>本系列主讲如何具体操作，因此对于Git内部的原理将<strong>不会过多深究</strong>。</p>
<p>本文严禁任何形式的转载、搬运！</p>
</blockquote>
<p>本文作为该系列的<strong>实战篇</strong>，将正式介绍如何使用IDEA结合Git进行项目管理。</p>
<p>注意：本文假设你已经成功在IDEA中配置了git</p>
<p>在配置篇中，当我们已经在本地推送/克隆了一个项目后，我们能看到如下两个功能块。</p>
<p>在本文中，我们称红色箭头所指为<strong>git日志</strong>，蓝色箭头所指为<strong>git工具栏</strong>。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312102051273.png"></p>
<h2 id="设置默认添加文件">设置默认添加文件</h2>
<p>还记得<strong>基础篇</strong>我们提到的四个工作区域吗？如果我们想要将变更的文件推送到远程仓库，我们首先需要<strong>先保证变更的文件在暂存区中</strong>。</p>
<p>在<strong>基础篇</strong>中，我们提到每当创建一个文件时，idea都会询问我们是否将文件添加到git，即是否添加到暂存区中。为了避免这种麻烦，我们打开设置，按以下流程选择<strong>无提示添加</strong>，这样idea就会默认将我们创建的文件自动添加到git了。</p>
<p>配置完该设置后，相当于每次创建文件都会默认执行git命令<code>git add</code>，作用是将文件添加到暂存区中。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312102106887.png"></p>
<h2 id="推送更改的文件到本地库">推送更改的文件到本地库</h2>
<blockquote>
<p>当我们在本地完成了我们的工作后，我们可以先将变更的文件提交到本地库中保存。</p>
</blockquote>
<p>这里我们点击蓝色箭头所指git工具栏的第二个按钮，即提交按钮。</p>
<p>该按钮对应git命令<code>git commit</code>，作用是将文件提交到本地库中。</p>
<p>这里我简单的修改了下我自己的更改，填写完提交信息后点击提交。</p>
<blockquote>
<p>如果点击提交并推送的话，就可以直接将变更推送到远程仓库，省去了一个步骤。</p>
<p>提交并推送按钮对应git命令<code>git commit &amp; git push</code>，作用是将暂存区的变更直接推送到远程仓库</p>
</blockquote>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312102104592.png"></p>
<p>提交完毕后，我们打开git日志，能在当前的本地分支中看到我们刚才提交记录：</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312102115556.png"></p>
<h2 id="将本地库的提交记录推送到远程库中">将本地库的提交记录推送到远程库中</h2>
<blockquote>
<p>当我们已经确定本地库的工作已经结束后，我们就可以将本地库的记录推送到远程库中。</p>
</blockquote>
<p>我们点击git工具栏的第三个按钮，即推送按钮。</p>
<p>该按钮对应git命令<code>git push</code>，作用是将本地的提交记录推送到远程库中。</p>
<p>这里我准备了两个提交记录，按<code>ctrl + 鼠标左键</code>可以多选提交记录。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312102123171.png"></p>
<p>点击推送按钮后，我们可以在git日志中看到远程仓库中出现了我们刚才推送的提交记录。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312102124929.png"></p>
<p>此时我们打开gitee，可以发现提交记录同样生效于gitee中。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312102126723.png"></p>
<h2 id="拉取远程分支的变更">拉取远程分支的变更</h2>
<blockquote>
<p>当你的远程仓库发生改变时（你的队友推送了提交记录到远程仓库中），而你自己的远程分支不会自动拉取别人的提交记录，也就是说你的远程分支不具备别人的提交历史。</p>
</blockquote>
<p>此时我们需要点击提取所有远程按钮，这时候就可以把远程仓库的所有本更拉取到自己的远程分支中。</p>
<p>提取所有远程按钮对应git命令<code>git fetch</code>，作用是将远程仓库的变更拉取到远程分支中。</p>
<p>这里我在gitee中手动添加了一个README.md文件。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312102135718.png"></p>
<p>点击按钮后，可以看到远程分支中增加了这条记录，同时，我们可以注意到本地分支名后出现了向下的蓝色箭头，这代表着当前远程分支已经更新了，本地分支也应该进行更新。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312102138603.png"></p>
<p>我们选中对应的本地分支，点击更新所选内容按钮，就可以把远程分支的提交记录添加到我们的本地分支中。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312102152552.png"></p>
<p>这里我们也可以选择git工具栏的第一个按钮，这样就可以指定方式传入变更。</p>
<p>该按钮对应git命令<code>git merge</code>或<code>git rebase</code>，作用是传入变更到当前分支</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312102154586.png"></p>
<p>结果如下</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312102152982.png"></p>
<h2 id="新建分支">新建分支</h2>
<blockquote>
<p>正常来说我们开发项目肯定不可能只用一个本地分支，一般会在其他分支中开发完毕后再推送到主分支中，这时候就需要新建分支的操作了。</p>
</blockquote>
<p>分支可以简单的理解为<strong>我想基于这个提交以及它所有的父提交进行新的工作</strong>。当我们新建分支时，Git就会将<strong>HEAD指向的提交记录以及该提交记录之前的所有提交记录</strong>保存到新分支中。</p>
<p>如果我们要新建分支，可以点击左侧工具栏的加号按钮，这样就得到了一个新的分支。</p>
<p>该按钮对应git命令<code>git branch</code>，作用是基于当前提交历史创建新的分支。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312131915710.png"></p>
<p>新建后我们得到了一个全新的分支dev，他包含了master的全部提交历史。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312131916579.png"></p>
<p>当然，由于HEAD当前指向的是最后一个提交记录，所以新分支dev就包含了master的全部提交记录。如果我们要基于<code>测试1</code>这个提交历史创建分支的话，需要右键该提交历史，点击新建分支后再输入分支名并创建即可。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312132014188.png"></p>
<p>这样我们就得到了一个包含测试1之前所有提交记录的分支。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312132015309.png"></p>
<h2 id="回到指定的提交历史">回到指定的提交历史</h2>
<blockquote>
<p>假设你当前开发的代码出现了问题，如何找回之前的代码？这时候就可以通过<strong>签出</strong>这一git提供功能回到之前的提交历史。当你签出到一个提交历史时，你就获取到了这个提交历史的所有代码。</p>
<p>注意：在签出前确保你当前的代码已经提交到了本地或者远程分支中，签出到其他提交记录时IDEA不会帮你自动保存当前的代码。</p>
</blockquote>
<p>在签出的操作中，我们必须要明白<code>HEAD</code>这一概念，<code>HEAD</code>
是一个<strong>指向当前所在分支的指针</strong>，或者是<strong>指向当前所在提交记录的指针</strong>。在IDEA中，HEAD的位置可以通过黄色便签来看到，比如在下图master的提交历史中，HEAD指向的分支就是master，同时指向提交消息为<code>add README.md.</code>的提交记录。这里我们将下图称为图1。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312131935531.png"></p>
<p>如果我们要切换到<code>测试1</code>的提交历史上，右键<code>测试1</code>，点击签出修订。</p>
<p>签出修订按钮对应git命令<code>git checkout</code>，作用是将HEAD指针转移到当前分支/提交记录。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312131925168.png"></p>
<p>可以看到黄色便签转移到了测试1上，证明我们当前在测试1的提交历史上，这时我们就可以基于测试1的代码进行修改了。这里我们将下图称为图2。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312131945582.png"></p>
<p>但是这里有个问题，为什么图2在master分支上的黄色便签消失了？而在图1中黄色便签既指向了master又指向了最后一个提交记录<code>add README.md.</code></p>
<p>这里要明白一个原理，那就是分支本身也能看作是一个指针，这个指针<strong>恒指向该分支的最后一个提交记录</strong>。</p>
<p>那么在图1中，HEAD其实是通过指向分支<strong>进而</strong>指向了该分支的最后一个提交记录，即<code>HEAD-&gt;master-&gt;add README.md.</code>。而在图2中，HEAD被称作<code>游离的HEAD</code>，是因为它指向的并不是分支而是该分支的一个提交历史，自然就不会指向master分支了，即<code>HEAD-&gt;测试1</code>。</p>
<h2 id="基于指定提交历史修改代码">基于指定提交历史修改代码</h2>
<blockquote>
<p>在上一个<code>回到指定的提交历史</code>的操作中，我们通过签出的操作获取到了指定的提交历史的代码，这时我们就能够基于这个提交历史的代码进行开发。</p>
</blockquote>
<p>举个例子，假设我们要回到之前刚添加md文件的提交历史上进行代码开发，给md文件进行修改。我们当前分支的最新提交为<code>博文3</code>，如何回到提交历史<code>add README.md.</code>上？</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312262003659.png"></p>
<p>第一步我们肯定要签出到<code>add README.md.</code>上，签出后可以发现项目文件回到了刚开始提交md文件的时候。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312262003012.png"></p>
<p>这时我们对md文件进行修改，这里我删除了一些段落。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312262007614.png"></p>
<p>然后点击提交按钮，将这个修改历史<code>666</code>提交到本地分支中。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312262007485.png"></p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312262008726.png"></p>
<p>此时Git给出了警告。如果我们无视警告，仍然点击提交按钮，就会发现原本存在于<code>add README.md.</code>提交记录的指针消失了，而且我们修改后的提交记录<code>666</code>也并没有被提交到本地分支中。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312262012288.png"></p>
<p>还记得之前我们提到的<strong>游离的HEAD</strong>吗？如果直接在特定提交上修改代码并运行
<code>git commit</code>，这实际上会在游离的 HEAD
状态下创建一个新的提交，而不会创建分支。这样的操作可能会导致出现一个<strong>游离的提交</strong>，Git
的垃圾回收机制可能会删除这些提交。</p>
<h3 id="解决方法1">解决方法1</h3>
<p>一种方法是：我们在<strong>指定提交历史上创建一个分支</strong>，然后<strong>在新分支上开发完毕后进行提交</strong>。这两步操作前文已经详细介绍了，不再赘述，如图所示。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312262020744.png"></p>
<h3 id="解决方法2">解决方法2</h3>
<p>第二种方法则是：对指定提交记录执行<code>git revert</code>命令，该命令会基于指定提交记录创建一个新的提交历史</p>
<p>我们可以右键一个提交记录，选择还原提交选项。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312262038451.png"></p>
<p>如果当前分支的提交记录和还原的提交记录的文件存在差异的话会出现代码冲突。这里因为我当前分支的第一个提交记录<code>博文3</code>和<code>add README.md.</code>在md文件上存在差异，所以出现了冲突。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312262041894.png"></p>
<p>由于我们当前的目标是回到<code>add README.md.</code>这个提交记录的代码中，所以我们选择忽略来自其他提交的变更，保留<code>add README.md.</code>提交记录的原本代码即可。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312262042823.png"></p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312262044196.png"></p>
<p>写好提交消息后点击提交</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312262045900.png"></p>
<p>可以发现我们这样就创建了一个和<code>add README.md.</code>一模一样的提交记录了。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312262046939.png"></p>
<p>接着我们可以基于这个提交记录的代码进行开发，这里前文已经详细介绍了，不再赘述。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312262053876.png"></p>
<h2 id="将远程分支拉取到本地">将远程分支拉取到本地</h2>
<blockquote>
<p>设想这样一个场景：你的同事创建了一个新的远程分支并做了一个新的功能，而这个分支是你本地没有的，你现在的工作要基于这个新的功能才能进行下去，那么我们就需要把这个远程分支拉取到本地来。</p>
</blockquote>
<p>在这个例子中，你的同事创建了远程分支<code>origin/dev</code>，而我们本地并没有与其对应的分支。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312132128177.png"></p>
<p>我们只需要右键该分支，点击签出，即可将该远程分支拉取到本地。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312132131971.png"></p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312132131639.png"></p>
<h2 id="代码整合">代码整合</h2>
<blockquote>
<p>在项目合作中，将其他人的代码整合到自己的代码中是经常用到的操作，这时就需要利用到Git的合并或变基功能。</p>
</blockquote>
<p>一般来说代码整合会遇到以下几种情况：</p>
<ol type="1">
<li>当前分支正好比其他分支少了几条记录</li>
</ol>
<p>如图，当前我们自己的代码在dev1分支中，我们要整合来自dev的代码，当前dev1中没有dev中的<code>add README.md.</code>的修改记录。首先确保我们当前分支在dev1分支上。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312132149480.png"></p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312132150655.png"></p>
<p>我们右键dev分支，选择变基或合并均可。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312132152900.png"></p>
<p>可以看到dev的提交记录整合到了dev1中。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312132154892.png"></p>
<ol start="2" type="1">
<li>当前分支和其他分支都修改了几条记录</li>
</ol>
<p>如图，当前我们自己的代码在dev1分支中，我们要整合来自dev的代码，dev1中我写的md文件的内容较少。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312132200024.png"></p>
<p>在dev中我的队友写的md文件的内容较多。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312132201457.png"></p>
<p>现在一样要确保当前分支在dev1中，并且右键dev分支选择合并/变基来整合代码。这个时候就出现了<code>冲突</code>，大家应该很容易就想明白了，因为我当前分支和我队友的分支都同时存在文件名相同、内容不同的文件，这个问题不解决的话自然无法整合。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312132206002.png"></p>
<p>解决冲突的话就需要你和队友进行协商。比如这里我的分支dev1就比较少，队友的分支dev写的比我详细，所以我可以进行"妥协"，直接用队友的md文件即可，点击<code>接受他们的</code>这个按钮就可以使用队友的md文件了。</p>
<p>当然，我们也可以不进行妥协，IDEA提供了强大的修订功能，通过点击<code>合并</code>按钮，我们可以选择整合该文件的特定部分。具体如何操作，大家自行练习吧~</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312132211620.png"></p>
<h2 id="删除提交">删除提交</h2>
<blockquote>
<p>我们在实际开发中难免会提交一些无用的提交记录，这时需要利用删除提交的操作。</p>
</blockquote>
<p>右键一个提交记录，选择删除提交选项，即可删除。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312262055354.png"></p>
<p>很简单吧？但要注意已经推送到远程分支的提交是<strong>不可删除</strong>的。</p>
<p>这里的绿色提交记录代表还<strong>未推送到远程分支的提交记录</strong>，棕色代表<strong>已经推送到远程分支的提交记录</strong>。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312262057344.png"></p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title>【IDEA结合Git实现项目管理实战】四、git冲突篇</title>
    <url>/2023/01/04/%E5%9B%9B%E3%80%81%E8%A7%A3%E5%86%B3%E4%BB%A3%E7%A0%81%E5%86%B2%E7%AA%81/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<blockquote>
<p>本系列将结合我个人参与团队协作开发项目的经验来介绍如何使用IDEA结合Git实现项目管理，因此可能与真正的企业开发协作存在差异，且文章所涉及的解析可能存在个人理解与实际的偏差。</p>
<p>本系列主讲如何具体操作，因此对于Git内部的原理将<strong>不会过多深究</strong>。</p>
<p>本文严禁任何形式的转载、搬运！</p>
</blockquote>
<p>在使用Git进行项目管理时，代码合并是一项常见而重要的操作。本文将重点探讨两种常用的代码合并操作：合并（merge）和变基（rebase）。在进行代码合并时，我们难免会遇到Git冲突的情况。本文也将通过举例详细介绍如何通过IDEA使用Git进行合并或变基操作时可能遇到的代码冲突情况，并提供解决方法。</p>
<h2 id="什么是git冲突">什么是git冲突</h2>
<p>在多分支并行处理时，每个分支可能基于不同版本的主干分支创建。如果每个分支都独立开发而没有进行代码合并，自然不会出现代码冲突。但是，当两个分支同时修改同一文件时，在代码合并时就会出现冲突。</p>
<p>下图为两个分支分别使用合并/变基操作解决冲突后的提交树。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041548373.png"></p>
<h2 id="解决git冲突">解决git冲突</h2>
<p>介绍完冲突出现的原因，那么如何解决冲突呢？在解决git冲突时，我们需要确定以哪个分支的文件版本为准，或者取两个分支的文件的部分片段进行整合。</p>
<p>IDEA提供了强大的冲突解决功能，供用户处理git冲突。下面将进行详细介绍。</p>
<p>当前分支dev1的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmdp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RedissonClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JavaTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 打印hello world</span></span><br><span class="line">        System.out.println(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 打印你好 世界</span></span><br><span class="line">        System.out.println(<span class="string">&quot;你好 世界&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>目标分支dev的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmdp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RedissonClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JavaTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">access</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//打印Red Dead:redemption2</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Red Dead:redemption2&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">access2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//打印荒野大镖客：救赎2</span></span><br><span class="line">        System.out.println(<span class="string">&quot;荒野大镖客：救赎2&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我们现在的目标是<strong>让两个分支合并后的代码中同时出现method1、method2、access和acess2这四个方法</strong>。</p>
<p>执行合并后，出现界面：</p>
<p>左侧为<strong>当前分支</strong>dev1的提交记录，中间为合并前的<strong>预览结果</strong>，右侧为<strong>目标分支</strong>dev的提交记录。</p>
<p>其中红色区域为代码存在差异的部分。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041920979.png"></p>
<p>先来看第一块红色区域的中间部分的代码。大家一定会疑惑预览结果中出现这段代码是什么意思？为什么会出现报错呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">=======</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; dev</span><br></pre></td></tr></table></figure>
<p>这里其实是git对于左右侧存在差异的代码的标记。符号&lt;&lt;&lt;&lt;&lt;&lt;&lt;
xxx的下方是左侧存在差异的代码，符号&gt;&gt;&gt;&gt;&gt;&gt;
xxx的上方是右侧存在差异的代码，比如&lt;&lt;&lt;&lt;&lt;&lt;&lt;
HEAD箭头所指方向也就是我们当前分支的方向（在左侧），在该箭头下面的部分是当前分支的与目标分支的差异代码，这里因为左侧比右侧少了一段代码，因此下面啥东西没有；=======代表分割符号，该分割符号的下面就是目标分支的代码，即import
java.util.concurrent.TimeUnit；&gt;&gt;&gt;&gt;&gt;&gt;&gt;
dev也就代表目标分支的方向（在右侧）</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041931339.png"></p>
<p>那么如何解决冲突呢？对于我们的目标来说，我们的输出语句自然不需要导入这个包，因此把语句<code>import java.util.concurrent.TimeUnit;</code>给删除即可。</p>
<p>点击左侧的箭头符号，可以把<strong>中间区域被替换成左侧的红色区域</strong>（那根细线，也就是没有代码）。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041939164.png"></p>
<p>点击后中间区域消失。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041940548.png"></p>
<p>再来看第二个红色区域，根据我们的目标，我们要将这四个方法都添加进入中间区域。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041941892.png"></p>
<p>先点击左侧的箭头。可以发现<strong>中间区域被替换为左侧代码</strong>，右侧向左箭头变成了向左下箭头。</p>
<p>这个向左下的箭头代表<strong>将右侧的代码添加到中间代码的下方</strong>。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041942329.png"></p>
<p>点击后如图：</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041945639.png"></p>
<p>那么一切就大功告成了，冲突解决成功，点击应用按钮。</p>
<p>git提示还有冲突未处理，这是为什么？</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041946034.png"></p>
<p>把界面翻到上面，发现这个红色区域还没有处理，我们点击那个查号，作用是<strong>将冲突标记为已解决</strong>。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041947522.png"></p>
<p>这时IDEA提示所有变更已被处理，那么我们就可以放心大胆的合并了。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041948825.png"></p>
<p>合并成功！</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041949361.png"></p>
<h2 id="合并变基详解">合并/变基详解</h2>
<h3 id="合并git-merge">合并（git merge）</h3>
<p>当前分支和目标分支执行合并操作时，Git会将当前分支的<strong>最新提交记录</strong>与目标分支的<strong>最新提交记录</strong>合并，并在当前分支<strong>形成一个新的提交记录</strong>。</p>
<h4 id="示例1">示例1</h4>
<p>当前分支为dev1，目标分支为dev，目标分支dev中存在两条当前分支dev1分支没有的提交记录。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041725999.png"></p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041724559.png"></p>
<p>执行合并操作，dev中的提交记录添加到了分支dev1中。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041724739.png"></p>
<h4 id="示例2">示例2</h4>
<p>当前分支为dev1，目标分支为dev，当前分支dev1中存在两条目标分支dev分支没有的提交记录。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041730233.png"></p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041730182.png"></p>
<p>执行合并操作，git给出提示（已是最新
删除dev），当前分支dev1没有变动。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041730921.png"></p>
<h4 id="示例3">示例3</h4>
<p>当前分支为dev1，目标分支为dev，当前分支dev1中有新的提交记录<code>添加测试类</code>，目标分子dev中有新提交记录<code>添加新文件</code>（该示例由于都是添加新文件，没有对同一文件进行更改，因此不存在代码冲突）</p>
<p>dev1中添加了一个JavaTest文件。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041800046.png"></p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041803802.png"></p>
<p>dev分支中添加了一个test.lua文件。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041801717.png"></p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041801057.png"></p>
<p>执行合并操作，在目标分支dev1中生成一个新的提交记录<code>Merge branch 'dev' into dev1</code>，该提交记录包含了这两个提交记录的变更，如图。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041803003.png"></p>
<p>在提交树中，可以看到两个提交记录合并为一个记录。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041806469.png"></p>
<h3 id="变基git-rebase">变基（git rebase）</h3>
<p>当前分支和目标分支执行变基操作时，Git会将目标分支的最新提交记录依次应用到当前分支的每个新的提交记录中。</p>
<h4 id="示例1-1">示例1</h4>
<p>当前分支为dev1，目标分支为dev，目标分支dev中存在两条当前分支dev1分支没有的提交记录。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041817890.png"></p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041818586.png"></p>
<p>执行变基操作，dev中的两条记录添加到了dev1中。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041818966.png"></p>
<h4 id="示例2-1">示例2</h4>
<p>当前分支为dev1，目标分支为dev，当前分支dev1中存在两条目标分支dev分支没有的提交记录。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041819420.png"></p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041820315.png"></p>
<p>执行变基操作，没有发生变化。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041821704.png"></p>
<h4 id="示例3-1">示例3</h4>
<p>当前分支为dev1，目标分支为dev，当前分支dev1中有新的提交记录<code>添加测试类</code>，目标分子dev中有新提交记录<code>添加新文件</code>（该示例由于都是添加新文件，没有对同一文件进行更改，因此不存在代码冲突）</p>
<p>dev1中添加了一个JavaTest文件。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041800046.png"></p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041803802.png"></p>
<p>dev分支中添加了一个test.lua文件。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041801717.png"></p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041801057.png"></p>
<p>执行变基操作，dev分支的提交记录添加到了dev1分支中。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041815763.png"></p>
<h3 id="总结">总结</h3>
<p>可以发现，无论是对于合并还是变基操作的示例1和示例2，最终执行操作后的结果都是一样的。对于合并操作，git将两个分支进行合并，最后生成一个新的提交记录，提交树存在交叉。对于变基操作，git将目标分支的提交记录应用到当前分支，提交树仍然是线性的。如图所示。</p>
<p>至于在实际开发中选择合并还是变基，还是看个人喜好了。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041857723.png"></p>
<h2 id="代码冲突示例">代码冲突示例</h2>
<p>注意：本文为方便理解，所有示例均简单的修改项目中的md文件，实际开发中可能存在对多个文件的冲突，但万变不离其宗，只要你具备了解决单个文件代码冲突的能力，那么多个文件的冲突也能轻松应对。</p>
<h3 id="合并变基分支1">合并/变基分支1</h3>
<blockquote>
<p>分支情况，当前dev1的两个提交记录<code>博文1</code>和<code>博文2</code>都在dev的提交记录<code>博文3</code>之前，其余分支一样</p>
<p>时间顺序：博文1-&gt;博文2-&gt;博文3</p>
</blockquote>
<h4 id="合并">合并</h4>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312171650606.png"></p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312171651771.png"></p>
<p>此时合并<strong>有代码冲突</strong>，解决这个冲突。</p>
<p>发现该冲突只针对博文2，也就是最后一个提交记录</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312171656401.png"></p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312171653568.png"></p>
<h4 id="变基">变基</h4>
<p>该冲突为<code>博文1</code>和<code>博文3</code>的冲突</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312171659732.png"></p>
<p>该冲突为变基后的<code>博文1</code>和<code>博文2</code>的冲突</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312171704664.png"></p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312171705189.png"></p>
<h3 id="合并变基分支2">合并/变基分支2</h3>
<blockquote>
<p>分支情况：</p>
<p>dev中的<code>博文3</code>在dev1中的<code>博文1</code>和<code>博文2</code>之间</p>
<p>时间顺序：博文1-&gt;博文3-&gt;博文2</p>
</blockquote>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312221625858.png"></p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312221625313.png"></p>
<h4 id="合并-1">合并</h4>
<p>基于上述情况，合并分支存在代码冲突</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312171852617.png"></p>
<p>在代码冲突中，存在<strong>博文2和博文3</strong>的冲突，</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312221626751.png"></p>
<p>冲突解决后如图所示。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312221626357.png"></p>
<p>这里紫色因为<code>博文3</code>是属于别的分支过来的，其父提交是<code>add README.md.</code>。所以从<code>add README.md.</code>出发，与dev1原本的提交记录<code>博文2</code>结合形成一个新的提交记录<code>Merge branch 'dev' into dev1</code></p>
<p>结论：分支以时间顺序进行排序，合并分支永远是两个分支的最后一个提交历史进行合并。</p>
<h4 id="变基-1">变基</h4>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312221627898.png"></p>
<p><code>博文1</code>和<code>博文3</code>存在冲突</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312221627499.png"></p>
<p>冲突解决后，选择提交消息不变</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312221628613.png"></p>
<p>依然存在冲突</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312221629350.png"></p>
<p>可以发现该冲突来自于已经变基的提交<code>博文1</code>和之后的<code>博文2</code></p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312221637405.png"></p>
<p>得到变基后的提交树</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312221637539.png"></p>
<h3 id="合并变基分支3">合并/变基分支3</h3>
<blockquote>
<p>分支情况：</p>
<p>dev1中的两个提交记录<code>博文1</code>和<code>博文2</code>在dev中的<code>博文3</code>提交之后</p>
<p>时间顺序：博文3-&gt;博文1-&gt;博文2</p>
</blockquote>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312221647989.png"></p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312221647856.png"></p>
<h4 id="合并-2">合并</h4>
<p><code>博文2</code>和<code>博文3</code>存在代码冲突</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202401041446569.png"></p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312221648662.png"></p>
<h4 id="变基-2">变基</h4>
<p>冲突来自于<code>博文3</code>和<code>博文1</code></p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312221730553.png"></p>
<p>冲突来自变基后的<code>博文1</code>和<code>博文2</code></p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312221730592.png"></p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312221651338.png"></p>
<h3 id="总结-1">总结</h3>
<p>通过这三个代码冲突的示例，看到区别了吗？</p>
<p>在合并操作时，冲突通常发生在<strong>两个分支的最新提交记录</strong>上。这是因为合并是将两个不同的分支合并为一个，而最新的提交记录是两个分支的端点。如果两个分支都对同一文件进行了修改，Git
无法确定应该选择哪个更改，因此会产生冲突。</p>
<p>在变基操作时，冲突可能发生在<strong>当前分支的提交记录和目标分支的提交记录之间的每个提交记录</strong>上。这是因为变基是将一系列提交应用到另一个分支上，而不仅仅是最新的提交。如果两个分支都修改了相同的文件，冲突可能会在每个提交记录上发生，而不仅仅是最新的提交。</p>
<p>总的来说，冲突是由于两个分支都对同一文件进行了修改，而 Git
无法自动解决冲突的情况下发生的。在合并操作中，冲突通常发生在最新的提交记录上；在变基操作中，冲突可能发生在多个提交记录上。</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>项目管理</tag>
      </tags>
  </entry>
  <entry>
    <title>【IDEA结合Git实现项目管理实战】二、基础篇</title>
    <url>/2023/12/10/%E4%BA%8C%E3%80%81Git%E7%9A%84%E5%9B%9B%E4%B8%AA%E5%8C%BA%E5%9F%9F/</url>
    <content><![CDATA[<h2 id="前言">前言</h2>
<blockquote>
<p>本系列将结合我个人参与团队协作开发项目的经验来介绍如何使用IDEA结合Git实现项目管理，因此可能与真正的企业开发协作存在差异，且文章所涉及的解析可能存在个人理解与实际的偏差。</p>
<p>本系列主讲如何具体操作，因此对于Git内部的原理将<strong>不会过多深究</strong>。</p>
<p>本文严禁任何形式的转载、搬运！</p>
</blockquote>
<p>本文作为该系列的<strong>基础篇</strong>，将简要介绍使用Git所应该知道的<strong>最基本</strong>的知识，因此不算深究原理，哈哈。</p>
<p>注意：本文假设你已经成功在IDEA中配置了git</p>
<h2 id="git的四个工作区域">Git的四个工作区域</h2>
<h3 id="基本概念">基本概念</h3>
<p>Git本地有三个工作区域，分别是<strong>工作区</strong>、<strong>暂存区</strong>、<strong>本地仓库</strong></p>
<p>Git远程有一个工作区域，叫做<strong>远程仓库</strong></p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312072037674.png"></p>
<ul>
<li><p>工作区：开发者当前工作的目录，主要包含项目的实际文件，其中可能包括<strong>未进行版本管理</strong>的新文件和<strong>已修改</strong>的文件。</p></li>
<li><p>暂存区：作为一个临时存储区域，用于存放工作区中已经修改的文件的<strong>快照</strong>，以便将它们作为一个逻辑单元提交到本地仓库。</p></li>
<li><p>本地库：包含了项目的<strong>提交历史</strong>，开发者可以对其进行各种操作，如分支合并、变基、签出等。本地库是在开发者本地计算机上的存储库。</p></li>
<li><p>远程库：
存放在<strong>代码托管平台</strong>（如Gitee、GitHub）上的仓库，包含了已推送的代码版本、分支、标签等信息。开发者可以通过推送和拉取操作与远程库进行交互，以保持代码同步。</p></li>
</ul>
<h3 id="概念解释">概念解释</h3>
<h4 id="工作区">工作区</h4>
<p>一下子引入了这么多概念，可能大家会有点接受不了，那么这里对以上概念进行详细解释。</p>
<p>具体来说，工作区可以看做你在IDEA中打开的项目目录，如下图：</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312072100334.png"></p>
<p>这里的项目目录就可以看作是工作区，但是在这个工作区中，既存在正常颜色（白色）的文件名，也存在红色、绿色和蓝色的文件名，那么这些文件分别代表什么含义？这里的文件的颜色，其实也就对应着上文所谓<strong>未进行版本管理</strong>的新文件和<strong>已修改</strong>的文件。如下表：</p>
<table>
<colgroup>
<col style="width: 6%">
<col style="width: 93%">
</colgroup>
<thead>
<tr class="header">
<th>颜色</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>白色</td>
<td>在当前提交历史未改动或者已经提交到本地库的文件</td>
</tr>
<tr class="even">
<td>红色</td>
<td>未进行版本管理的新文件，也被称为未跟踪的文件</td>
</tr>
<tr class="odd">
<td>绿色</td>
<td>已经进行版本管理的新文件，该文件已被添加到暂存区中</td>
</tr>
<tr class="even">
<td>蓝色</td>
<td>当前工作区中被修改的文件，该文件已被添加到暂存区中，与绿色相似</td>
</tr>
</tbody>
</table>
<blockquote>
<p>红色文件名、绿色文件名实例</p>
</blockquote>
<p>大家可以自行测试下，如果你直接在项目目录中创建一个文件的话，IDEA会做出提醒：</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312072113939.png"></p>
<p>这时如果你选择添加的话，该文件就会变成绿色文件从而<strong>被Git进行版本管理</strong>，如果选择取消的话，说明你不希望该文件被Git管理，那么该文件就是红色文件而<strong>不能被提交到暂存区</strong>。</p>
<p>总结：</p>
<ol type="1">
<li><p>当你创建一个新文件时，它就是红色的，表示这是一个未跟踪的文件。通过运行
<code>git add</code>
命令，将文件添加到暂存区，此时文件变为绿色，表示它已经被 Git
管理并准备提交。</p></li>
<li><p>如果你不想将一个未跟踪的文件或已修改的文件纳入版本管理，你可以选择不使用
<code>git add</code> 命令，或者使用 <code>git reset</code>
命令来取消已经添加到暂存区的文件。取消后，文件会回到红色状态，表示它未被跟踪或未被修改。</p></li>
<li><p>但是对于我们日常开发来说，我们创建一个文件肯定是有用意的，一般都希望该文件被提交上去，所以我们一般都选择添加文件，这样才能通过添加到暂存区，再到本地库最终推送到远程仓库中。</p></li>
</ol>
<blockquote>
<p>白色、蓝色文件名实例</p>
</blockquote>
<p>比如这里我删除了md文件中的其中一行，md文件的文件名由白色转为了蓝色</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312072130777.png"></p>
<p>该文件一般在该项目已经<strong>提交到本地库</strong>中后，我们准备开发新的功能时才会出现，也就是我们修改了当前已经存在于本地库中的文件，该文件就会被转化成蓝色文件。因为该文件已经被<strong>Git版本管理过了</strong>，所以可以直接提交到本地库。</p>
<p>总结：</p>
<ol type="1">
<li>蓝色文件可以直接提交到本地库中，因为其已经被Git版本管理了</li>
<li>蓝色文件可以简单认为就是白色文件被修改后的文件</li>
</ol>
<h4 id="暂存区">暂存区</h4>
<p>经过前面的内容，大家多少应该可以感觉到，暂存区其实是我们看不见、摸不着的存在，在暂存区中存在的文件一般是绿色和蓝色文件，也就是我们已经使用<code>git add</code>命令添加的文件。</p>
<p>当我们开发完毕一个新的功能后，我们就会准备将这次修改记录提交到<strong>本地仓库</strong>，这时候使用<code>git commit</code>命令就可以将暂存区中的文件提交到本地仓库中。</p>
<blockquote>
<p>提交实例</p>
</blockquote>
<p>在该实例中，我们删除了md文件的其中一行（可以看到changes一栏中是蓝色文件，如果你把一个新的文件也添加到暂存区的话就是前文提到的绿色文件），这里我们要在下方框中填写相关介绍，以便帮助其他团队成员或日后的自己知道这次的提交做了什么。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312072141103.png"></p>
<h4 id="本地库">本地库</h4>
<p>具体来说，本地库包含了开发者本地完整的提交历史和所有的本地分支，本地库中的提交记录是暂存区通过执行<code>git commit</code>后得来的。</p>
<p>这里要注意<strong>本地分支</strong>和<strong>本地库</strong>的区别，<strong>本地分支</strong>只是本地库众多分支的<strong>其中一个分支</strong>，当然本地库也可以只包含一个本地分支（但是一般来说开发者不会这么做）。</p>
<blockquote>
<p>本地分支实例</p>
</blockquote>
<p>这里展示了本地库中的master分支，在这个分支中存在着该分支的提交历史和各种信息。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312072150426.png"></p>
<h4 id="远程库">远程库</h4>
<p>远程库是存放在<strong>代码托管平台</strong>（如Gitee、GitHub）上的仓库，本地库执行<code>git push</code>命令可将本地的提交记录推送到远程仓库中。</p>
<p><strong>远程分支</strong>和<strong>远程库</strong>的区别同<strong>本地分支</strong>与<strong>本地库</strong>的区别一样</p>
<blockquote>
<p>远程分支实例</p>
</blockquote>
<p>同上本地分支实例。</p>
<p><img src="https://modox.oss-cn-hangzhou.aliyuncs.com/img/202312072201594.png"></p>
<p>需要注意的是，由于我们在团队开发中涉及到多人的共同协作，因此每个人都可以向远程仓库中推送自己的代码，也就意味在当你在开发新的代码时，远程仓库可能已经发生了变动，那么远程分支也就不能实时和远程仓库的提交记录保持同步了，这时我们需要使用<code>git fetch</code>命令，将远程仓库的提交记录拉取到的远程分支中。</p>
<h2 id="总结">总结</h2>
<p>通过对于工作区域的认识，大家想必已经了解了一个文件如何从工作区一步步提交到远程仓库中，当然这里存在着很多操作中的细节，如切换分支，合并来自其他分支的结果等，而我们是使用IDEA结合Git实现版本管理，同样存在着如何具体使用的问题。由于本篇只讲理论，就不过多介绍了，本系列将会继续更新下去，大家敬请期待~</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>项目管理</tag>
      </tags>
  </entry>
</search>
